#!/bin/bash
# update-agent-context.sh
# Refreshes AI context files with latest Goal Kit project information.

set -euo pipefail

# --- Setup ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common.sh" || {
  echo "Missing common.sh. Exiting."; exit 1;
}

usage() {
  cat << EOF
Usage: $0 [OPTIONS]

Update AI agent context files with current Goal Kit project information.

OPTIONS:
  -h, --help      Show this help message
  -v, --verbose   Enable verbose logging
  -f, --force     Force update even if no changes detected

EXAMPLES:
  $0
  $0 --verbose
  $0 --force
EOF
}

# --- Parse Arguments ---
VERBOSE=false
FORCE=false

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help) usage; exit 0 ;;
    -v|--verbose) VERBOSE=true ;;
    -f|--force) FORCE=true ;;
    *) log_error "Unknown option: $1"; usage; exit 1 ;;
  esac
  shift
done

# --- Validate Repo ---
if ! is_git_repo; then
  log_error "Not in a git repository."
  log_info "Please run this from the root of a Goal Kit project."
  exit 1
fi

PROJECT_ROOT=$(get_git_root)
cd "$PROJECT_ROOT"

if [[ ! -f ".goalkit/vision.md" ]]; then
  log_error "Not a Goal Kit project."
  log_info "Run 'goalkeeper init' first to initialize."
  exit 1
fi

# --- Info ---
PROJECT_NAME=$(basename "$PROJECT_ROOT")
CURRENT_BRANCH=$(git branch --show-current)
ACTIVE_GOALS_COUNT=$(find goals -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l)
ACTIVE_COLLABORATIONS_COUNT=$(find collaborations -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l)

# Get current persona information
PERSONA_CONFIG_DIR="$PROJECT_ROOT/.goalkit/personas"
CURRENT_PERSONA_FILE="$PERSONA_CONFIG_DIR/current_persona.txt"
CURRENT_PERSONA="general"  # Default persona
if [[ -f "$CURRENT_PERSONA_FILE" ]]; then
    CURRENT_PERSONA=$(cat "$CURRENT_PERSONA_FILE")
fi

# Get persona display name
PERSONA_NAME=$(python3 -c "
import json
personas_config = {
  'default_persona': 'general',
  'personas': {
    'general': {'name': 'General Agent'},
    'github': {'name': 'GitHub/Git Specialist'},
    'milestone': {'name': 'Milestone Planner'},
    'strategy': {'name': 'Strategy Explorer'},
    'qa': {'name': 'Quality Assurance'},
    'documentation': {'name': 'Documentation Specialist'}
  }
}
print(personas_config['personas'].get('$CURRENT_PERSONA', {}).get('name', '$CURRENT_PERSONA'))
" 2>/dev/null || echo "Unknown ($CURRENT_PERSONA)")

[[ "$VERBOSE" == "true" ]] && log_info "Updating context for project '$PROJECT_NAME' on branch '$CURRENT_BRANCH'."

**Project**: $PROJECT_NAME
**Branch**: $CURRENT_BRANCH
**Active Goals**: $ACTIVE_GOALS_COUNT
**Active Collaborations**: $ACTIVE_COLLABORATIONS_COUNT
**Updated**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

## 🎯 CRITICAL: Goal-Driven Development Methodology

**YOU MUST FOLLOW THESE RULES EXACTLY:**

### Core Methodology Rules
1. **OUTCOMES FIRST**: Always focus on measurable user/business outcomes, NOT implementation details
2. **NO IMPLEMENTATION DETAILS IN GOALS**: Never put languages, frameworks, APIs, or methods in goal definitions
3. **USE THE 5-CMD WORKFLOW**: Always follow vision → goal → strategies → milestones → execute sequence
4. **MEASURABLE SUCCESS**: Every goal must have specific, quantifiable metrics (%, $, time, user counts)
5. **STRATEGY EXPLORATION**: Before implementing, ALWAYS explore multiple approaches using /goalkit.strategies
6. **ADAPTIVE EXECUTION**: Be ready to pivot based on learning and evidence during /goalkit.execute

### When to Use Each Command
- **/goalkit.vision**: Establish project foundation and guiding principles
- **/goalkit.goal**: Create goals with specific success metrics (no implementation details!)
- **/goalkit.strategies**: Explore 3+ different approaches to achieve goals
- **/goalkit.milestones**: Create measurable milestones
- **/goalkit.execute**: Execute with learning and adaptation
- **/goalkit.collaborate** - Coordinate work between agents or maintain consistency

### Coordination Commands
- **/goalkit.collaborate** - Set up coordination between agents or maintain self-consistency
- **/goalkit.sync** - Synchronize state and progress (coming soon)
- **/goalkit.check** - Check coordination status (coming soon)

### Persona Commands
- **Current Persona**: $PERSONA_NAME ($CURRENT_PERSONA)
- **Use different personas**: Leverage specialized agent capabilities for different tasks

## 🚀 Project Vision

$(grep -v "^#" .goalkit/vision.md | head -10 2>/dev/null || echo "No vision defined yet.")

## 🎯 Active Goals

if [[ $ACTIVE_GOALS_COUNT -gt 0 ]]; then
  ACTIVE_GOALS_TEXT="Recent goals:"
  for goal_dir in goals/*/; do
    [[ -d "$goal_dir" ]] || continue
    goal_name=$(basename "$goal_dir")
    goal_statement=$(grep -m 1 "Goal Statement" "$goal_dir/goal.md" 2>/dev/null | sed 's/.*Goal Statement: //' || echo "Goal in progress")
    ACTIVE_GOALS_TEXT+=

---

*This context file is auto-generated by update-agent-context.sh.*"

# --- Target Context Files ---
CONTEXT_FILES=(
  "CLAUDE.md" ".claude/context.md"
  "GEMINI.md" ".gemini/context.md"
  "CURSOR.md" ".cursor/context.md"
  "WINDSURF.md" ".windsurf/context.md"
  "KILOCODE.md" ".kilocode/context.md"
)

# --- Write Files ---
UPDATED_FILES=()

for context_file in "${CONTEXT_FILES[@]}"; do
  full_path="$PROJECT_ROOT/$context_file"
  dir=$(dirname "$full_path")
  [[ -d "$dir" ]] || mkdir -p "$dir"

  if [[ -f "$full_path" || "$FORCE" == "true" ]]; then
    echo "$CONTEXT_CONTENT" > "$full_path"
    UPDATED_FILES+=("$context_file")
    [[ "$VERBOSE" == "true" ]] && log_success "Updated $context_file"
  fi
done

# --- Summary ---
if [[ ${#UPDATED_FILES[@]} -gt 0 ]]; then
  log_success "Context updated in ${#UPDATED_FILES[@]} files:"
  for f in "${UPDATED_FILES[@]}"; do echo "  - $f"; done
else
  log_warning "No context files found."
  log_info "Supported files:"
  printf '  - %s\n' "${CONTEXT_FILES[@]}"
fi

echo
log_info "✅ Agent context update complete!"
log_info "Project: $PROJECT_NAME"
log_info "Branch: $CURRENT_BRANCH"
log_info "Active Goals: $ACTIVE_GOALS_COUNT"
\n'"- **$goal_name**: $goal_statement"
  done
  ACTIVE_GOALS_TEXT=$(echo "$ACTIVE_GOALS_TEXT" | head -8)
else
  ACTIVE_GOALS_TEXT="No active goals yet. Use /goalkit.goal to create your first goal."
fi
$ACTIVE_GOALS_TEXT

## 🤝 Active Collaborations

$(if [[ -d "collaborations" ]] && [[ $ACTIVE_COLLABORATIONS_COUNT -gt 0 ]]; then
    echo "Active collaborations:"
    for collab_dir in collaborations/*/; do
        if [[ -d "$collab_dir" ]]; then
            collab_name=$(basename "$collab_dir")
            collab_statement=$(grep -m 1 "Coordination Statement" "$collab_dir/collaboration.md" 2>/dev/null | sed 's/.*Coordination Statement: //' | head -1 || echo "Collaboration in progress")
            echo "- **$collab_name**: $collab_statement"
        fi
    done | head -3
else
    echo "No active collaborations. Use /goalkit.collaborate to coordinate work."
fi)

## 📋 Core Commands
- /goalkit.vision – Define or refine project vision  
- /goalkit.goal – Create and manage goals  
- /goalkit.strategies – Explore implementation approaches  
- /goalkit.milestones – Define measurable steps  
- /goalkit.execute – Execute and learn iteratively  

## 📊 Development Principles

Remember these core principles:
1. **Outcome-First**: Prioritize user and business outcomes
2. **Strategy Flexibility**: Multiple valid approaches exist for any goal
3. **Measurement-Driven**: Progress must be measured and validated
4. **Learning Integration**: Treat implementation as hypothesis testing
5. **Adaptive Planning**: Change course based on evidence
6. **Coordination-Aware**: Consider how work fits with other agents and processes
7. **Persona-Optimized**: Use specialized agent personas for different development tasks

## 🔧 Next Recommended Actions

if [[ $ACTIVE_GOALS_COUNT -eq 0 ]]; then
  RECOMMENDED_ACTIONS=

---

*This context file is auto-generated by update-agent-context.sh.*"

# --- Target Context Files ---
CONTEXT_FILES=(
  "CLAUDE.md" ".claude/context.md"
  "GEMINI.md" ".gemini/context.md"
  "CURSOR.md" ".cursor/context.md"
  "WINDSURF.md" ".windsurf/context.md"
  "KILOCODE.md" ".kilocode/context.md"
)

# --- Write Files ---
UPDATED_FILES=()

for context_file in "${CONTEXT_FILES[@]}"; do
  full_path="$PROJECT_ROOT/$context_file"
  dir=$(dirname "$full_path")
  [[ -d "$dir" ]] || mkdir -p "$dir"

  if [[ -f "$full_path" || "$FORCE" == "true" ]]; then
    echo "$CONTEXT_CONTENT" > "$full_path"
    UPDATED_FILES+=("$context_file")
    [[ "$VERBOSE" == "true" ]] && log_success "Updated $context_file"
  fi
done

# --- Summary ---
if [[ ${#UPDATED_FILES[@]} -gt 0 ]]; then
  log_success "Context updated in ${#UPDATED_FILES[@]} files:"
  for f in "${UPDATED_FILES[@]}"; do echo "  - $f"; done
else
  log_warning "No context files found."
  log_info "Supported files:"
  printf '  - %s\n' "${CONTEXT_FILES[@]}"
fi

echo
log_info "✅ Agent context update complete!"
log_info "Project: $PROJECT_NAME"
log_info "Branch: $CURRENT_BRANCH"
log_info "Active Goals: $ACTIVE_GOALS_COUNT"
1. Use /goalkit.vision to establish your project vision.\n2. Use /goalkit.goal to define your first goal.'
else
  if [[ $ACTIVE_COLLABORATIONS_COUNT -eq 0 ]]; then
    RECOMMENDED_ACTIONS=

---

*This context file is auto-generated by update-agent-context.sh.*"

# --- Target Context Files ---
CONTEXT_FILES=(
  "CLAUDE.md" ".claude/context.md"
  "GEMINI.md" ".gemini/context.md"
  "CURSOR.md" ".cursor/context.md"
  "WINDSURF.md" ".windsurf/context.md"
  "KILOCODE.md" ".kilocode/context.md"
)

# --- Write Files ---
UPDATED_FILES=()

for context_file in "${CONTEXT_FILES[@]}"; do
  full_path="$PROJECT_ROOT/$context_file"
  dir=$(dirname "$full_path")
  [[ -d "$dir" ]] || mkdir -p "$dir"

  if [[ -f "$full_path" || "$FORCE" == "true" ]]; then
    echo "$CONTEXT_CONTENT" > "$full_path"
    UPDATED_FILES+=("$context_file")
    [[ "$VERBOSE" == "true" ]] && log_success "Updated $context_file"
  fi
done

# --- Summary ---
if [[ ${#UPDATED_FILES[@]} -gt 0 ]]; then
  log_success "Context updated in ${#UPDATED_FILES[@]} files:"
  for f in "${UPDATED_FILES[@]}"; do echo "  - $f"; done
else
  log_warning "No context files found."
  log_info "Supported files:"
  printf '  - %s\n' "${CONTEXT_FILES[@]}"
fi

echo
log_info "✅ Agent context update complete!"
log_info "Project: $PROJECT_NAME"
log_info "Branch: $CURRENT_BRANCH"
log_info "Active Goals: $ACTIVE_GOALS_COUNT"
1. Review active goals in goals/ directory.\n2. Use /goalkit.collaborate to coordinate work (if multiple agents).\n3. Use /goalkit.strategies to explore implementation approaches.\n4. Use /goalkit.milestones to plan measurable progress steps.'
  else
    RECOMMENDED_ACTIONS=

---

*This context file is auto-generated by update-agent-context.sh.*"

# --- Target Context Files ---
CONTEXT_FILES=(
  "CLAUDE.md" ".claude/context.md"
  "GEMINI.md" ".gemini/context.md"
  "CURSOR.md" ".cursor/context.md"
  "WINDSURF.md" ".windsurf/context.md"
  "KILOCODE.md" ".kilocode/context.md"
)

# --- Write Files ---
UPDATED_FILES=()

for context_file in "${CONTEXT_FILES[@]}"; do
  full_path="$PROJECT_ROOT/$context_file"
  dir=$(dirname "$full_path")
  [[ -d "$dir" ]] || mkdir -p "$dir"

  if [[ -f "$full_path" || "$FORCE" == "true" ]]; then
    echo "$CONTEXT_CONTENT" > "$full_path"
    UPDATED_FILES+=("$context_file")
    [[ "$VERBOSE" == "true" ]] && log_success "Updated $context_file"
  fi
done

# --- Summary ---
if [[ ${#UPDATED_FILES[@]} -gt 0 ]]; then
  log_success "Context updated in ${#UPDATED_FILES[@]} files:"
  for f in "${UPDATED_FILES[@]}"; do echo "  - $f"; done
else
  log_warning "No context files found."
  log_info "Supported files:"
  printf '  - %s\n' "${CONTEXT_FILES[@]}"
fi

echo
log_info "✅ Agent context update complete!"
log_info "Project: $PROJECT_NAME"
log_info "Branch: $CURRENT_BRANCH"
log_info "Active Goals: $ACTIVE_GOALS_COUNT"
1. Review active goals in goals/ directory.\n2. Review active collaborations in collaborations/ directory.\n3. Use /goalkit.strategies, /goalkit.milestones, and /goalkit.execute as needed.'
  fi
fi
$RECOMMENDED_ACTIONS

---

*This context file is auto-generated by update-agent-context.sh.*"

# --- Target Context Files ---
CONTEXT_FILES=(
  "CLAUDE.md" ".claude/context.md"
  "GEMINI.md" ".gemini/context.md"
  "CURSOR.md" ".cursor/context.md"
  "WINDSURF.md" ".windsurf/context.md"
  "KILOCODE.md" ".kilocode/context.md"
)

# --- Write Files ---
UPDATED_FILES=()

for context_file in "${CONTEXT_FILES[@]}"; do
  full_path="$PROJECT_ROOT/$context_file"
  dir=$(dirname "$full_path")
  [[ -d "$dir" ]] || mkdir -p "$dir"

  if [[ -f "$full_path" || "$FORCE" == "true" ]]; then
    echo "$CONTEXT_CONTENT" > "$full_path"
    UPDATED_FILES+=("$context_file")
    [[ "$VERBOSE" == "true" ]] && log_success "Updated $context_file"
  fi
done

# --- Summary ---
if [[ ${#UPDATED_FILES[@]} -gt 0 ]]; then
  log_success "Context updated in ${#UPDATED_FILES[@]} files:"
  for f in "${UPDATED_FILES[@]}"; do echo "  - $f"; done
else
  log_warning "No context files found."
  log_info "Supported files:"
  printf '  - %s\n' "${CONTEXT_FILES[@]}"
fi

echo
log_info "✅ Agent context update complete!"
log_info "Project: $PROJECT_NAME"
log_info "Branch: $CURRENT_BRANCH"
log_info "Active Goals: $ACTIVE_GOALS_COUNT"
