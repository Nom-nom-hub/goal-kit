#!/bin/bash
# update-agent-context.sh
# Refreshes AI context files with latest Goal Kit project information.

set -euo pipefail

# --- Setup ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common.sh" || {
  echo "Missing common.sh. Exiting."; exit 1;
}

usage() {
  cat << EOF
Usage: $0 [OPTIONS]

Update AI agent context files with current Goal Kit project information.

OPTIONS:
  -h, --help      Show this help message
  -v, --verbose   Enable verbose logging
  -f, --force     Force update even if no changes detected

EXAMPLES:
  $0
  $0 --verbose
  $0 --force
EOF
}

# --- Parse Arguments ---
VERBOSE=false
FORCE=false

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help) usage; exit 0 ;;
    -v|--verbose) VERBOSE=true ;;
    -f|--force) FORCE=true ;;
    *) log_error "Unknown option: $1"; usage; exit 1 ;;
  esac
  shift
done

# --- Validate Repo ---
if ! is_git_repo; then
  log_error "Not in a git repository."
  log_info "Please run this from the root of a Goal Kit project."
  exit 1
fi

PROJECT_ROOT=$(get_git_root)
cd "$PROJECT_ROOT"

if [[ ! -f ".goalkit/vision.md" ]]; then
  log_error "Not a Goal Kit project."
  log_info "Run 'goalkeeper init' first to initialize."
  exit 1
fi

# --- Info ---
PROJECT_NAME=$(basename "$PROJECT_ROOT")
CURRENT_BRANCH=$(git branch --show-current)
ACTIVE_GOALS_COUNT=$(find goals -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l)

[[ "$VERBOSE" == "true" ]] && log_info "Updating context for project '$PROJECT_NAME' on branch '$CURRENT_BRANCH'."

# --- Build Vision Section ---
VISION_CONTENT=$(grep -v "^#" .goalkit/vision.md | head -10 2>/dev/null || echo "No vision defined yet.")

# --- Build Goals Section ---
if [[ $ACTIVE_GOALS_COUNT -gt 0 ]]; then
  ACTIVE_GOALS_TEXT="Recent goals:"
  for goal_dir in goals/*/; do
    [[ -d "$goal_dir" ]] || continue
    goal_name=$(basename "$goal_dir")
    goal_statement=$(grep -m 1 "Goal Statement" "$goal_dir/goal.md" 2>/dev/null | sed 's/.*Goal Statement: //' || echo "Goal in progress")
    ACTIVE_GOALS_TEXT+=$'\n'"- **$goal_name**: $goal_statement"
  done
  ACTIVE_GOALS_TEXT=$(echo "$ACTIVE_GOALS_TEXT" | head -8)
else
  ACTIVE_GOALS_TEXT="No active goals yet. Use /goalkit.goal to create your first goal."
fi

# --- Recommended Actions ---
if [[ $ACTIVE_GOALS_COUNT -eq 0 ]]; then
  RECOMMENDED_ACTIONS=$'1. Use /goalkit.vision to establish your project vision.\n2. Use /goalkit.goal to define your first goal.'
else
  RECOMMENDED_ACTIONS=$'1. Review current goals in goals/ directory.\n2. Use /goalkit.strategies to explore new approaches.'
fi

# --- Construct Context ---
CONTEXT_CONTENT="# Goal Kit Project Context

**Project:** $PROJECT_NAME  
**Branch:** $CURRENT_BRANCH  
**Active Goals:** $ACTIVE_GOALS_COUNT  
**Updated:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")

## ðŸŽ¯ Goal-Driven Development Status
Focus on measurable outcomes over specifications. Learn and adapt continuously.

## ðŸš€ Project Vision
$VISION_CONTENT

## ðŸŽ¯ Active Goals
$ACTIVE_GOALS_TEXT

## ðŸ“‹ Core Commands
- /goalkit.vision â€“ Define or refine project vision  
- /goalkit.goal â€“ Create and manage goals  
- /goalkit.strategies â€“ Explore implementation approaches  
- /goalkit.milestones â€“ Define measurable steps  
- /goalkit.execute â€“ Execute and learn iteratively  

## ðŸ”§ Recommended Actions
$RECOMMENDED_ACTIONS

---

*This context file is auto-generated by update-agent-context.sh.*"

# --- Target Context Files ---
CONTEXT_FILES=(
  "CLAUDE.md" ".claude/context.md"
  "GEMINI.md" ".gemini/context.md"
  "CURSOR.md" ".cursor/context.md"
  "WINDSURF.md" ".windsurf/context.md"
  "KILOCODE.md" ".kilocode/context.md"
)

# --- Write Files ---
UPDATED_FILES=()

for context_file in "${CONTEXT_FILES[@]}"; do
  full_path="$PROJECT_ROOT/$context_file"
  dir=$(dirname "$full_path")
  [[ -d "$dir" ]] || mkdir -p "$dir"

  if [[ -f "$full_path" || "$FORCE" == "true" ]]; then
    echo "$CONTEXT_CONTENT" > "$full_path"
    UPDATED_FILES+=("$context_file")
    [[ "$VERBOSE" == "true" ]] && log_success "Updated $context_file"
  fi
done

# --- Summary ---
if [[ ${#UPDATED_FILES[@]} -gt 0 ]]; then
  log_success "Context updated in ${#UPDATED_FILES[@]} files:"
  for f in "${UPDATED_FILES[@]}"; do echo "  - $f"; done
else
  log_warning "No context files found."
  log_info "Supported files:"
  printf '  - %s\n' "${CONTEXT_FILES[@]}"
fi

echo
log_info "âœ… Agent context update complete!"
log_info "Project: $PROJECT_NAME"
log_info "Branch: $CURRENT_BRANCH"
log_info "Active Goals: $ACTIVE_GOALS_COUNT"
